# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Description: Stack to provision a complete ECS cluster

Parameters:
  ClusterName:
    Description: ECS cluster name
    Type: String
    Default: ecs-cluster-demo
  BackendServiceName:
    Description: Service name that is going to be provided for ECS
    Type: String
    Default: backend-app
  BackendImageUrl:
    Description: Image URL that you uploaded to ECR registry
    Type: String
  VpcId:
    Description: The VPC ID that you will create your resources In
    Type: String
  VpcCidr:
    Description: The CIDR of the VPC
    Type: String
  PubSubnet1Id:
    Description: The first public subnet
    Type: String
  PubSubnet2Id:
    Description: The second public subnet
    Type: String

Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  # That role is reponsible to allow ECS download image, create LB and Target groups etc
  ECSExecutionRoleArn:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  
  TaskRoleForApplication:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /


  EfsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for the EFS"
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - 
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt BackendServiceSecurityGroup.GroupId

  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_60_DAYS
      FileSystemTags:
        - Key: Name
          Value: efs-db-storage
      PerformanceMode: generalPurpose
      Encrypted: true
      ThroughputMode: bursting

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EfsFileSystem
      SecurityGroups: 
        - !Ref EfsSecurityGroup
      SubnetId: !Ref PubSubnet1Id

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EfsFileSystem
      SecurityGroups: 
        - !Ref EfsSecurityGroup
      SubnetId: !Ref PubSubnet2Id
  
  MongoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Mongo-log-group

  BackendAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Backend-app-log-group

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: 
      - EfsFileSystem
      - MongoLogGroup
      - BackendAppLogGroup
    Properties:
      Family: !Ref 'BackendServiceName'
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSExecutionRoleArn.Arn # That role is reponsible to allow ECS download image, create LB and Target groups etc
      TaskRoleArn: !GetAtt TaskRoleForApplication.Arn
      ContainerDefinitions:
      - Name: 'mongodb'
        Image: 'mongo'
        PortMappings: 
          - ContainerPort: 27017
        Environment:
          - Name: MONGO_INITDB_ROOT_USERNAME
            Value: 'user'
          - Name: MONGO_INITDB_ROOT_PASSWORD
            Value: 'secret'
        MountPoints:
          - SourceVolume: data
            ContainerPath: /data/db
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref AWS::Region
            awslogs-group: !Ref MongoLogGroup
            awslogs-stream-prefix: ecs
      - Name: 'backend'
        Image: !Ref 'BackendImageUrl'
        PortMappings: 
          - ContainerPort: 80
        Environment:
          - Name: MONGODB_USERNAME
            Value: 'user'
          - Name: MONGODB_PASSWORD
            Value: 'secret'
          - Name: MONGODB_URL
            Value: 'localhost'
        Command: 
          - node
          - app.js
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref AWS::Region
            awslogs-group: !Ref BackendAppLogGroup
            awslogs-stream-prefix: ecs
        DependsOn:
          - ContainerName: mongodb
            Condition: START
          
      Volumes:
      - Name: data
        EFSVolumeConfiguration:
          FilesystemId: !Ref EfsFileSystem
          TransitEncryption: DISABLED

  BackendALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable access from everywhere
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: BackendALBSecurityGroup
    Properties:
      Name: backend-alb
      Subnets: 
        - !Ref PubSubnet1Id
        - !Ref PubSubnet2Id
      SecurityGroups:
        - !Ref BackendALBSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: BackendTargetGroup
      TargetType: ip
      HealthCheckPath: /books
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP

  # Service Security Group
  BackendServiceSecurityGroup:
    DependsOn: BackendALBSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable access from VPC to this service
      SecurityGroupIngress:
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
        SourceSecurityGroupId: !GetAtt BackendALBSecurityGroup.GroupId

  # Service for our application in ECS Cluster
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Ref 'BackendServiceName'
      Cluster: !Ref ClusterName
      LaunchType: FARGATE
      LoadBalancers: 
        - ContainerName: 'backend'
          ContainerPort: 80
          TargetGroupArn: !Ref BackendTargetGroup 
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref BackendServiceSecurityGroup
          Subnets: # Could be private subnets for my application
            - !Ref PubSubnet1Id
            - !Ref PubSubnet2Id
      TaskDefinition: !Ref 'BackendTaskDefinition'

Outputs:
  LoadBalancerUrl:
    Description: The URL of the Backend ALB
    Value: !GetAtt BackendLoadBalancer.DNSName